import asyncio
import pandas as pd
from binance import AsyncClient
import pyarrow

API_KEY = ""
API_SECRET = ""


async def fetch_klines(client, symbol, interval, start_str, end_str, retries=3):
    for attempt in range(1, retries + 1):
        try:
            klines = await client.get_historical_klines(symbol, interval, start_str, end_str)
            print(f"‚úÖ {symbol}: –ø–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")
            return symbol, klines
        except Exception as e:
            print(f"‚ùå [{symbol}] –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
            if attempt < retries:
                await asyncio.sleep(10 * attempt)
            else:
                print(f"‚ö†Ô∏è [{symbol}] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º!.")
                return symbol, []


async def main():
    client = await AsyncClient.create(API_KEY, API_SECRET)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π –≤ BTC
        exchange_info = await client.get_exchange_info()
        btc_pairs = [s['symbol'] for s in exchange_info['symbols'] if s['quoteAsset'] == 'BTC']
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(btc_pairs)} BTC-–ø–∞—Ä")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        start_str = "1 Feb 2025"
        end_str = "1 Mar 2025"
        interval = AsyncClient.KLINE_INTERVAL_1MINUTE

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç—á–∞
        batch_size = 5
        delay_between_batches = 60  # —Å–µ–∫—É–Ω–¥

        historical_data = {}

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 5
        for i in range(0, len(btc_pairs), batch_size):
            batch = btc_pairs[i:i + batch_size]
            print(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã: {batch}")

            tasks = [
                fetch_klines(client, symbol, interval, start_str, end_str)
                for symbol in batch
            ]

            results = await asyncio.gather(*tasks, return_exceptions=True)

            for res in results:
                if isinstance(res, Exception):
                    print(f"üõë –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏: {res}")
                    continue

                symbol, klines = res
                if not klines:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol} ‚Äî 0 —Å–≤–µ—á–µ–π")
                    continue

                historical_data[symbol] = klines

            if i + batch_size < len(btc_pairs):
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay_between_batches} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–µ–π...")
                await asyncio.sleep(delay_between_batches)

        return historical_data

    finally:
        await client.close_connection()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main() –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    historical_data = asyncio.run(main())

    # 1. –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    # –ò–Ω–¥–µ–∫—Å 5 –≤ –∫–∞–∂–¥–æ–º kline —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ (volume)
    symbol_volume = {}
    for symbol, klines in historical_data.items():
        total_volume = sum(float(kline[5]) for kline in klines) if klines else 0
        symbol_volume[symbol] = total_volume

    # 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –æ–±—ä—ë–º—É –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-100
    sorted_symbols = sorted(symbol_volume.items(), key=lambda x: x[1], reverse=True)
    top_100_symbols = [symbol for symbol, volume in sorted_symbols[:100]]

    print("\n–¢–æ–ø-100 –ø–∞—Ä, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É –æ–±—ä—ë–º—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2025:")
    print(top_100_symbols)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–ø-100 –ø–∞—Ä

    records = []
    for symbol in top_100_symbols:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        klines = historical_data.get(symbol, [])

        for kline in klines:
            record = {
                'symbol': symbol,
                'open_time': int(kline[0]),
                'open': float(kline[1]),
                'high': float(kline[2]),
                'low': float(kline[3]),
                'close': float(kline[4]),
                'volume': float(kline[5]),
                'close_time': int(kline[6]),
                'quote_asset_volume': float(kline[7]),
                'number_of_trades': int(kline[8]),
                'taker_buy_base_asset_volume': float(kline[9]),
                'taker_buy_quote_asset_volume': float(kline[10])
            }
            records.append(record)

    # 4. –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
    df = pd.DataFrame(records)

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ —Ñ–∞–π–ª Parquet
    df.to_parquet("historical_data.parquet", engine="pyarrow", compression="snappy")

    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª historical_data.parquet")
